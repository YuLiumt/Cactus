EinsteinAnalysis
===================


QuasiLocalMeasures
-------------------
Calculate quasi-local measures such as masses, momenta, or angular
momenta and related quantities on closed two-dimentional surfaces,
including on horizons.

Parameter
^^^^^^^^^^
* Input a surface that the user specifies and can calculate useful quantities

    >>> QuasiLocalMeasures::num_surfaces   = 1
    >>> QuasiLocalMeasures::spatial_order  = 4
    >>> QuasiLocalMeasures::interpolator = "Lagrange polynomial interpolation"
    >>> QuasiLocalMeasures::interpolator_options = "order=4"
    >>> QuasiLocalMeasures::surface_name[0] = "waveextract surface at 100"

Output
^^^^^^^^
* Scalar quantities on the surface

    >>> IOASCII::out0D_vars  = "QuasiLocalMeasures::qlm_scalars"




AHFinderDirect
---------------
In 3+1 numerical relativity, it's often useful to know the positions and shapes of any black holes in each slice. 

Finding Apparent Horizons in a numerical spacetime. It calulates various quantities like horizon area and its corresponding mass.

.. note::

    The main complication here is that AHFinderDirect needs an initial guess for an AH shape, and if this initial guess is inaccurate AHFinderDirect may fail to find the AH.

Parameter
^^^^^^^^^^^
* How often should we try to find apparent horizons?

    >>> AHFinderDirect::find_every = 128 # every course

* Number of apparent horizons to search for

    >>> AHFinderDirect::N_horizons = 2

* Move the origins with the horizons

    >>> AHFinderDirect::move_origins = yes

* Which surface should we store the info?

    >>> AHFinderDirect::origin_x [1] =
    >>> AHFinderDirect::initial_guess__coord_sphere__x_center[1] = 
    >>> AHFinderDirect::initial_guess__coord_sphere__radius [1] =
    >>> AHFinderDirect::which_surface_to_store_info [1] = 2
    >>> AHFinderDirect::track_origin_source_x        [1] = "PunctureTracker::pt_loc_x[0]"
    >>> AHFinderDirect::track_origin_source_y        [1] = "PunctureTracker::pt_loc_y[0]"
    >>> AHFinderDirect::track_origin_source_z        [1] = "PunctureTracker::pt_loc_z[0]"
    >>> AHFinderDirect::max_allowable_horizon_radius [1] = 3

Multipole
----------
Multipole thorn can decompose multiple grid functions with any spin-weight on multiple spheres. A set of radii for these spheres, as well as the number of angular points to use, can be speciﬁed.

The angular dependence of a field :math:`u(t, r, \theta, \varphi)` can be expanded in spin-weight s spherical harmonics

.. math::

    u(t, r, \theta, \varphi)=\sum_{l=0}^{\infty} \sum_{m=-l}^{l} C^{l m}(t, r)_{s} Y_{l m}(\theta, \varphi)

where the coefficients :math:`C^{l m}(t, r)` are given by

.. digraph:: foo

   "Multipole" -> "AEILocalInterp";

Parameter
^^^^^^^^^^
* Decide the number and radii of the coordinate spheres on which you want to decompose.

    >>> Multipole::nradii    = 3  
    >>> Multipole::radius[0] = 10  
    >>> Multipole::radius[1] = 20  
    >>> Multipole::radius[2] = 30  
    >>> Multipole::variables = "MyThorn::u"

* How many points in the theta and phi direction?

    >>> Multipole::ntheta = 120
    >>> Multipole::nphi   = 240

* The maximum l mode to extract

    >>> Multipole::l_max = 8

* Output an HDF5 file for each variable containing one dataset per mode at each radius

    >>> Multipole::output_hdf5  = yes

WeylScal4
----------
Calculate the Weyl Scalars for a given metric given the fiducial tetrad.

Parameter
^^^^^^^^^^
* Finite differencing order

    >>> WeylScal4::fdOrder = 8

* Which scalars to calculate

    >>> WeylScal4::calc_scalars = "psis"

* Compute invariants

    >>> WeylScal4::calc_invariants = "always"